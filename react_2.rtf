{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-Bold;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red31\green36\blue45;\red255\green255\blue255;\red228\green58\blue65;
\red239\green240\blue242;\red13\green100\blue126;\red162\green70\blue22;\red63\green69\blue80;\red60\green184\blue123;
\red190\green191\blue193;}
{\*\expandedcolortbl;;\cssrgb\c16078\c18824\c23137;\cssrgb\c100000\c100000\c100000;\cssrgb\c92549\c32157\c32157;
\cssrgb\c94902\c95294\c96078;\cssrgb\c0\c46667\c56863;\cssrgb\c70196\c35294\c10588;\cssrgb\c31373\c34118\c38824;\cssrgb\c27451\c76078\c55686;
\cssrgb\c79216\c79608\c80000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid401\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid501\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid601\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid701\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid801\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid901\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1001\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1401\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1501\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1601\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1701\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1801\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid19}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Next Generation Jaavascript(ES6 Syntax) - React uses next gen javascript features.\
\
1. Let and const - are different ways of creating variables just like var in keyword. In ES6 two different keywords are introduced let and const. var can also be used , but it is highly advisable to use let and const instead in es6.\
 Let - is used for. Variable values\
Const - is used for constant variables. Values.\
\
2. Arrow Functions-  that\'92s a different syntax of creating javascript function.\
\
Normal function in javascript  will look like this,\
\
function myFunc()\{\
   \'85.\
\}\
\
Arrow function will look ,like this,\
const myFunc = () => \{\
  \'85.  \
\}\
\
3. Exports and Imports(Modules)- ES6 offers writing modular javascript. We can import any variable into an another javascript file like this,\
\
person.js.                                 utility.js                                                    app.js\
\
const person = \{                     export const clean = () => \{\'85.\}		import person from \'91./person.js\'92\
	name: \'91Max\'92;                export const baseData = 10;		import pro from \'91./person.js\'92\
\}										import \{baseData\} from \'91./utility.js\'92\
										import \{clean\} from \'91./utility.js\'92\
export default person\
\
Note - if we export using default keyword that means, while we will be importing from person.js it will always import person no matter whatever name you mention. But if you are not mentioning default keyword then you should import with correct variable name with the curly. Parentheses. But. In that case you can choose to use alias. Like this,\
\
import  \{baseData as bs\} from \'91./utility.js\'92\
\
And if you want to import all the variable from a specific .js file,\
Import \{* as bundled\} from \'91./utility.js\'92\
\
\
4. Classes - classes are the blueprints of the javascript objects.\
class Person\{\
	name = \'93Max\'94 \'97\'97 Property\
	call = () => \{\'85\} \'97\'97\'97 Method\
\}  \
\
const myPerson = new Person()\
myPerson.call()\
Console.log(myPerson.name)  \
\
classes can be inherited too.\
\
class Person extends Master \
\
5. Modern syntax for initializing properties and methods of. class-\
\
ES6 - \
constructor()\{\
	this.myProperty = \'91value\'92\
\}\
\
ES7 -\
myProperty = \'91value\'92\
\
6. Spread  and rest operators - (\'85)\
\
Spread - Used to split up array. Elements or object properties\
\
const newArray = [\'85oldArray, 1, 2]\
const newObject = \{\'85oldObject, newProp:5\}\
\
Rest - used to merge a list of functions arguments into an array\
function sortArgs(\'85args) \{\
	return args.sort()\
\} \
\
In this example, sortArgs might receive more than one argument, but we are showing only one args with rest operator (\'85) which will convert those into the array.\
\
7.Destructuring - easily extract array elements or objects properties and store them in variables.\
\
const numbers = [1,2,3]\
[nums1, ,nums2] = numbers;\
console.log(nums1, nums3); \'97\'971. 3\
\
8. Reference and. Primitive types \'97\
 Numbers, Boolean variable types are primitive types.   Const num = 2; const number = num(this is primitive type. Since this is just creating the copy of num)\
Arrays and objects are. reference types \
const person \{\
name : \'91Max\'92\
\};\
const newPerosn = person;\
person.name = \'91Manu\'92;\
console.log(newPerson);   // Output. Will be Manu(Since this was. Copy by refrerence)\
\
9. Array Functions - in ES6 syntax there is. function called map that  works on each element of array and perform some task.\
\
const numbers = [1.2.3];\
const doubleArray = numbers.map((num)=> \{\
	return num*2;\
\});\
This. Will double number. Of array.\
\
\
\
\pard\pardeftab720\partightenfactor0

\f1\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
Next-Gen JavaScript - Summary\cb1 \

\fs36 \cb3 In this module, I\'a0provided a brief introduction into some core next-gen JavaScript features, of course focusing on the ones you'll see the most in this course. Here's a quick summary!\cb1 \

\f2\b\fs48 \cb3 let &\'a0const
\f1\b0 \cb1 \

\fs36 \cb3 Read more about 
\f3\fs32\fsmilli16200 \cf4 \cb5 let
\f1\fs36 \cf2 \cb3 \'a0:\'a0{\field{\*\fldinst{HYPERLINK "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"}}{\fldrslt \cf6 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let}}\cb1 \
\cb3 Read more about 
\f3\fs32\fsmilli16200 \cf4 \cb5 const
\f1\fs36 \cf2 \cb3 \'a0:\'a0{\field{\*\fldinst{HYPERLINK "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"}}{\fldrslt \cf6 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const}}\cb1 \

\f3\fs32\fsmilli16200 \cf4 \cb5 let
\f1\fs36 \cf2 \cb3 \'a0 and 
\f3\fs32\fsmilli16200 \cf4 \cb5 const
\f1\fs36 \cf2 \cb3 \'a0 basically replace 
\f3\fs32\fsmilli16200 \cf4 \cb5 var
\f1\fs36 \cf2 \cb3 \'a0. You use 
\f3\fs32\fsmilli16200 \cf4 \cb5 let
\f1\fs36 \cf2 \cb3 \'a0 instead of 
\f3\fs32\fsmilli16200 \cf4 \cb5 var
\f1\fs36 \cf2 \cb3 \'a0 and 
\f3\fs32\fsmilli16200 \cf4 \cb5 const
\f1\fs36 \cf2 \cb3 \'a0 instead of 
\f3\fs32\fsmilli16200 \cf4 \cb5 var
\f1\fs36 \cf2 \cb3 \'a0 if you plan on never re-assigning this "variable"\'a0(effectively turning it into a constant therefore).\cb1 \

\f2\b\fs48 \cb3 ES6 Arrow Functions
\f1\b0 \cb1 \

\fs36 \cb3 Read more:\'a0{\field{\*\fldinst{HYPERLINK "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"}}{\fldrslt \cf6 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions}}\cb1 \
\cb3 Arrow functions are a different way of creating functions in JavaScript. Besides a shorter syntax, they offer advantages when it comes to keeping the scope of the 
\f3\fs32\fsmilli16200 \cf4 \cb5 this
\f1\fs36 \cf2 \cb3 \'a0 keyword (see {\field{\*\fldinst{HYPERLINK "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_binding_of_this"}}{\fldrslt \cf6 here}}).\cb1 \
\cb3 Arrow function syntax may look strange but it's actually simple.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
function\cf2  callMe(name) \{ \cf8 \cb1 \
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    console.log(name);\cf8 \cb1 \
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\}\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf2 \cb3 which you could also write as:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  callMe = \cf7 function\cf2 (name) \{ \cf8 \cb1 \
\ls2\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    console.log(name);\cf8 \cb1 \
\ls2\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\}\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf2 \cb3 becomes:\'a0\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  callMe = (name) => \{ \cf8 \cb1 \
\ls3\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    console.log(name);\cf8 \cb1 \
\ls3\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\}\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf2 \cb3 Important:\'a0
\f1\b0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 When having 
\f2\b no arguments
\f1\b0 , you have to use empty parentheses in the function declaration:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  callMe = () => \{ \cf8 \cb1 \
\ls4\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    console.log(\cf9 'Max!'\cf2 );\cf8 \cb1 \
\ls4\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\}\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf2 \cb3 When having
\f2\b  exactly one argument
\f1\b0 , you may omit the parentheses:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  callMe = name => \{ \cf8 \cb1 \
\ls5\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    console.log(name);\cf8 \cb1 \
\ls5\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\}\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf2 \cb3 When 
\f2\b just returning a value
\f1\b0 , you can use the following shortcut:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  returnMe = name => name\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf2 \cb3 That's equal to:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  returnMe = name => \{ \cf8 \cb1 \
\ls7\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    \cf7 return\cf2  name;\cf8 \cb1 \
\ls7\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\}\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs48 \cf2 \cb3 Exports &\'a0Imports
\f1\b0 \cb1 \

\fs36 \cb3 In React projects (and actually in all modern JavaScript projects), you split your code across multiple JavaScript files - so-called modules. You do this, to keep each file/ module focused and manageable.\cb1 \
\cb3 To still access functionality in another file, you need 
\f3\fs32\fsmilli16200 \cf4 \cb5 export
\f1\fs36 \cf2 \cb3 \'a0 (to make it available) and 
\f3\fs32\fsmilli16200 \cf4 \cb5 import
\f1\fs36 \cf2 \cb3 \'a0 (to get access)\'a0statements.\cb1 \
\cb3 You got two different types of exports:\'a0
\f2\b default
\f1\b0  (unnamed)\'a0and 
\f2\b named
\f1\b0  exports:\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\b \cf2 \cb3 default
\f1\b0  =>\'a0
\f3\fs32\fsmilli16200 \cf4 \cb5 export default ...;
\f1\fs36 \cf2 \cb3 \'a0\cb1 \

\f2\b \cb3 named
\f1\b0  =>\'a0
\f3\fs32\fsmilli16200 \cf4 \cb5 export const someData = ...;
\f1\fs36 \cf2 \cb3 \'a0\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 You can import 
\f2\b default exports
\f1\b0  like this:\cb1 \

\f3\fs32\fsmilli16200 \cf4 \cb5 import someNameOfYourChoice from './path/to/file.js';
\f1\fs36 \cf2 \cb3 \'a0\cb1 \
\cb3 Surprisingly,\'a0
\f3\fs32\fsmilli16200 \cf4 \cb5 someNameOfYourChoice
\f1\fs36 \cf2 \cb3 \'a0 is totally up to you.\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\b \cf2 \cb3 Named exports
\f1\b0  have to be imported by their name:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs32\fsmilli16200 \cf4 \cb5 import \{ someData \} from './path/to/file.js';
\f1\fs36 \cf2 \cb3 \'a0\cb1 \
\cb3 A file can only contain one default and an unlimited amount of named exports. You can also mix the one default with any amount of named exports in one and the same file.\cb1 \
\cb3 When importing 
\f2\b named exports
\f1\b0 , you can also import all named exports at once with the following syntax:\cb1 \

\f3\fs32\fsmilli16200 \cf4 \cb5 import * as upToYou from './path/to/file.js';
\f1\fs36 \cf2 \cb3 \'a0\cb1 \

\f3\fs32\fsmilli16200 \cf4 \cb5 upToYou
\f1\fs36 \cf2 \cb3 \'a0 is - well - up to you and simply bundles all exported variables/functions in one JavaScript object. For example, if you 
\f3\fs32\fsmilli16200 \cf4 \cb5 export const someData = ...
\f1\fs36 \cf2 \cb3 \'a0 (
\f3\fs32\fsmilli16200 \cf4 \cb5 /path/to/file.js
\f1\fs36 \cf2 \cb3 \'a0)\'a0you can access it on 
\f3\fs32\fsmilli16200 \cf4 \cb5 upToYou
\f1\fs36 \cf2 \cb3 \'a0 like this:\'a0
\f3\fs32\fsmilli16200 \cf4 \cb5 upToYou.someData
\f1\fs36 \cf2 \cb3 \'a0.\cb1 \

\f2\b\fs48 \cb3 Classes
\f1\b0 \cb1 \

\fs36 \cb3 Classes are a feature which basically replace constructor functions and prototypes. You can define blueprints for JavaScript objects with them.\'a0\cb1 \
\cb3 Like this:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
class\cf2  Person \{\cf8 \cb1 \
\ls8\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    constructor () \{\cf8 \cb1 \
\ls8\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
        \cf7 this\cf2 .name = \cf9 'Max'\cf2 ;\cf8 \cb1 \
\ls8\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    \}\cf8 \cb1 \
\ls8\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\}\cf8 \cb1 \
\ls8\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\'a0\cf8 \cb1 \
\ls8\ilvl0\cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  person = \cf7 new\cf2  Person();\cf8 \cb1 \
\ls8\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
console.log(person.name); \cf10 // prints 'Max'\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf2 \cb3 In the above example, not only the class but also a property of that class (=>\'a0
\f3\fs32\fsmilli16200 \cf4 \cb5 name
\f1\fs36 \cf2 \cb3 \'a0)\'a0is defined. The\'a0syntax you see there, is the "old"\'a0syntax for defining properties. In modern JavaScript projects (as the one used in this course), you can use the following, more convenient way of defining class properties:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
class\cf2  Person \{\cf8 \cb1 \
\ls9\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    name = \cf9 'Max'\cf2 ;\cf8 \cb1 \
\ls9\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\}\cf8 \cb1 \
\ls9\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\'a0\cf8 \cb1 \
\ls9\ilvl0\cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  person = \cf7 new\cf2  Person();\cf8 \cb1 \
\ls9\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
console.log(person.name); \cf10 // prints 'Max'\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf2 \cb3 You can also define methods. Either like this:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
class\cf2  Person \{\cf8 \cb1 \
\ls10\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    name = \cf9 'Max'\cf2 ;\cf8 \cb1 \
\ls10\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    printMyName () \{\cf8 \cb1 \
\ls10\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
        console.log(\cf7 this\cf2 .name); \cf10 // this is required to refer to the class!\cf8 \cb1 \
\ls10\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    \}\cf8 \cb1 \
\ls10\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\}\cf8 \cb1 \
\ls10\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\'a0\cf8 \cb1 \
\ls10\ilvl0\cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  person = \cf7 new\cf2  Person();\cf8 \cb1 \
\ls10\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
person.printMyName();\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf2 \cb3 Or like this:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls11\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
class\cf2  Person \{\cf8 \cb1 \
\ls11\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    name = \cf9 'Max'\cf2 ;\cf8 \cb1 \
\ls11\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    printMyName = () => \{\cf8 \cb1 \
\ls11\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
        console.log(\cf7 this\cf2 .name);\cf8 \cb1 \
\ls11\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    \}\cf8 \cb1 \
\ls11\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\}\cf8 \cb1 \
\ls11\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\'a0\cf8 \cb1 \
\ls11\ilvl0\cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  person = \cf7 new\cf2  Person();\cf8 \cb1 \
\ls11\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
person.printMyName();\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf2 \cb3 The second approach has the same advantage as all arrow functions have:\'a0The 
\f3\fs32\fsmilli16200 \cf4 \cb5 this
\f1\fs36 \cf2 \cb3 \'a0 keyword doesn't change its reference.\cb1 \
\cb3 You can also use 
\f2\b inheritance
\f1\b0  when using classes:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls12\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
class\cf2  Human \{\cf8 \cb1 \
\ls12\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    species = \cf9 'human'\cf2 ;\cf8 \cb1 \
\ls12\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\}\cf8 \cb1 \
\ls12\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\'a0\cf8 \cb1 \
\ls12\ilvl0\cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
class\cf2  Person \cf7 extends\cf2  Human \{\cf8 \cb1 \
\ls12\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    name = \cf9 'Max'\cf2 ;\cf8 \cb1 \
\ls12\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    printMyName = () => \{\cf8 \cb1 \
\ls12\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
        console.log(\cf7 this\cf2 .name);\cf8 \cb1 \
\ls12\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    \}\cf8 \cb1 \
\ls12\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\}\cf8 \cb1 \
\ls12\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\'a0\cf8 \cb1 \
\ls12\ilvl0\cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  person = \cf7 new\cf2  Person();\cf8 \cb1 \
\ls12\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
person.printMyName();\cf8 \cb1 \
\ls12\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
console.log(person.species); \cf10 // prints 'human'\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs48 \cf2 \cb3 Spread &\'a0Rest Operator
\f1\b0 \cb1 \

\fs36 \cb3 The spread and rest operators actually use the same syntax:\'a0
\f3\fs32\fsmilli16200 \cf4 \cb5 ...
\f1\fs36 \cf2 \cb3 \'a0\cb1 \
\cb3 Yes, that is the operator - just three dots. It's usage determines whether you're using it as the spread or rest operator.\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\b \cf2 \cb3 Using the Spread Operator:
\f1\b0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 The spread operator allows you to pull elements out of an array (=>\'a0split the array into a list of its elements) or pull the properties out of an object. Here are two examples:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  oldArray = [1, 2, 3];\cf8 \cb1 \
\ls13\ilvl0\cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  newArray = [...oldArray, 4, 5]; \cf10 // This now is [1, 2, 3, 4, 5];\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf2 \cb3 Here's the spread operator used on an object:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  oldObject = \{\cf8 \cb1 \
\ls14\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    name: \cf9 'Max'\cf8 \cb1 \
\ls14\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\};\cf8 \cb1 \
\ls14\ilvl0\cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  newObject = \{\cf8 \cb1 \
\ls14\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    ...oldObject,\cf8 \cb1 \
\ls14\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    age: 28\cf8 \cb1 \
\ls14\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\};\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs32\fsmilli16200 \cf4 \cb5 newObject
\f1\fs36 \cf2 \cb3 \'a0 would then be\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls15\ilvl0
\f4\fs24 \cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\{\cf8 \cb1 \
\ls15\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    name: \cf9 'Max'\cf2 ,\cf8 \cb1 \
\ls15\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    age: 28\cf8 \cb1 \
\ls15\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\}\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf2 \cb3 The spread operator is extremely useful for cloning arrays and objects.\'a0Since both are {\field{\*\fldinst{HYPERLINK "https://youtu.be/9ooYYRLdg_g"}}{\fldrslt \cf6 reference types (and not primitives)}}, copying them safely (i.e. preventing future mutation of the copied original)\'a0can be tricky. With the spread operator you have an easy way of creating a (shallow!) clone of the object or array.\'a0\cb1 \

\f2\b\fs48 \cb3 Destructuring
\f1\b0 \cb1 \

\fs36 \cb3 Destructuring allows you to easily access the values of arrays or objects and assign them to variables.\cb1 \
\cb3 Here's an example for an array:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  array = [1, 2, 3];\cf8 \cb1 \
\ls16\ilvl0\cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  [a, b] = array;\cf8 \cb1 \
\ls16\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
console.log(a); \cf10 // prints 1\cf8 \cb1 \
\ls16\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
console.log(b); \cf10 // prints 2\cf8 \cb1 \
\ls16\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
console.log(array); \cf10 // prints [1, 2, 3]\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf2 \cb3 And here for an object:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  myObj = \{\cf8 \cb1 \
\ls17\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    name: \cf9 'Max'\cf2 ,\cf8 \cb1 \
\ls17\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    age: 28\cf8 \cb1 \
\ls17\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\}\cf8 \cb1 \
\ls17\ilvl0\cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  \{name\} = myObj;\cf8 \cb1 \
\ls17\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
console.log(name); \cf10 // prints 'Max'\cf8 \cb1 \
\ls17\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
console.log(age); \cf10 // prints undefined\cf8 \cb1 \
\ls17\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
console.log(myObj); \cf10 // prints \{name: 'Max', age: 28\}\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf2 \cb3 Destructuring is very useful when working with function arguments. Consider this example:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  printName = (personObj) => \{\cf8 \cb1 \
\ls18\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    console.log(personObj.name);\cf8 \cb1 \
\ls18\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\}\cf8 \cb1 \
\ls18\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
printName(\{name: \cf9 'Max'\cf2 , age: 28\}); \cf10 // prints 'Max'\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf2 \cb3 Here, we only want to print the name in the function but we pass a complete person object to the function. Of course this is no issue but it forces us to call personObj.name inside of our function. We can condense this code with destructuring:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls19\ilvl0
\f4\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
const\cf2  printName = (\{name\}) => \{\cf8 \cb1 \
\ls19\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
    console.log(name);\cf8 \cb1 \
\ls19\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\}\cf8 \cb1 \
\ls19\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
printName(\{name: \cf9 'Max'\cf2 , age: 28\}); \cf10 // prints 'Max')\cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf2 \cb3 We get the same result as above but we save some code. By destructuring, we simply pull out the 
\f3\fs32\fsmilli16200 \cf4 \cb5 name
\f1\fs36 \cf2 \cb3 \'a0 property and store it in a variable/ argument named 
\f3\fs32\fsmilli16200 \cf4 \cb5 name
\f1\fs36 \cf2 \cb3 \'a0 which we then can use in the function body.
\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
}